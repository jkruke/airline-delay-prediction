#!/usr/bin/python3
# WARNING: Not yet tested once
# Note: You must install these packages:
# pip install openmeteo-requests
# pip install requests-cache retry-requests numpy pandas
#
# Or, if you like to live by the mountain cliff and don't use venv:
# sudo pip install openmeteo-requests --break-system-packages
# sudo pip install requests-cache retry-requests numpy pandas --break-system-packages

import pandas
import datetime
import requests
from argparse import ArgumentParser

parser = ArgumentParser(prog='get-weather', description='Get weather information between START_DATE and END_DATE of a list of airports')
parser.add_argument("airport_ids", "-a", required=True, help='A CSV file of one column, containing 3-character airport IATAs', metavar='AIRPORT')
parser.add_argument("start_date", "-s", required=True, help='Start date in YYYY-MM-DD format', metavar='START_DATE')
parser.add_argument("end_date", "-e", required=True, help='End date in YYYY-MM-DD format', metavar='END_DATE')
parser.add_argument("lo_file", "-lo", required=False,
                    help="CSV file listing airports' IATA/ICAO and latlong", metavar='LOCATION_FILE')
parser.add_argument("ofile", "-o", required=True, help='Output CSV file. Default to weather_{start_date}_{end_date}.csv', metavar='OUTPUT')
args = parser.parse_args()


ofile = args.ofile
if ofile is None:
	ofile = f'weather_{args.start_date}_{args.end_date}.csv'


location_file = pandas.read_csv(args.lo_file, header=0, usecols=["iata", "latitude", "longtitude"])

# Coordinate of the airport we're looking for
coordinate = location_file.loc[location_file["iata"] == airport_id]


## FROM HERE ON IS CODE GENERATED BY OPEN-METEO
## TWEAKED A LITTLE

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = -1)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
# The list of weather parameters we're interested in
params={
	"latitude": coordinate["latitude"],
	"longitude": coordinate["longtitude"],
	"start_date": args.start_date,
	"end_date": args.end_date,
	"hourly": [
		"temperature_2m",
		"relative_humidity_2m",
		"precipitation",
		"rain",
		"snowfall",
		"weather_code",
		"cloud_cover",
		"cloud_cover_low",
		"cloud_cover_mid",
		"cloud_cover_high",
		"wind_speed_10m",
		"wind_speed_100m",
		"wind_gusts_10m"
	],
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°E {response.Longitude()}°N")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()
hourly_relative_humidity_2m = hourly.Variables(1).ValuesAsNumpy()
hourly_precipitation = hourly.Variables(2).ValuesAsNumpy()
hourly_rain = hourly.Variables(3).ValuesAsNumpy()
hourly_snowfall = hourly.Variables(4).ValuesAsNumpy()
hourly_weather_code = hourly.Variables(5).ValuesAsNumpy()
hourly_cloud_cover = hourly.Variables(6).ValuesAsNumpy()
hourly_cloud_cover_low = hourly.Variables(7).ValuesAsNumpy()
hourly_cloud_cover_mid = hourly.Variables(8).ValuesAsNumpy()
hourly_cloud_cover_high = hourly.Variables(9).ValuesAsNumpy()
hourly_wind_speed_10m = hourly.Variables(10).ValuesAsNumpy()
hourly_wind_speed_100m = hourly.Variables(11).ValuesAsNumpy()
hourly_wind_gusts_10m = hourly.Variables(12).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s"),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s"),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m
hourly_data["relative_humidity_2m"] = hourly_relative_humidity_2m
hourly_data["precipitation"] = hourly_precipitation
hourly_data["rain"] = hourly_rain
hourly_data["snowfall"] = hourly_snowfall
hourly_data["weather_code"] = hourly_weather_code
hourly_data["cloud_cover"] = hourly_cloud_cover
hourly_data["cloud_cover_low"] = hourly_cloud_cover_low
hourly_data["cloud_cover_mid"] = hourly_cloud_cover_mid
hourly_data["cloud_cover_high"] = hourly_cloud_cover_high
hourly_data["wind_speed_10m"] = hourly_wind_speed_10m
hourly_data["wind_speed_100m"] = hourly_wind_speed_100m
hourly_data["wind_gusts_10m"] = hourly_wind_gusts_10m

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)
